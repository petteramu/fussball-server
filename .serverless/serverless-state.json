{
  "service": {
    "service": "Nf6Chill",
    "serviceObject": {
      "name": "Nf6Chill"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "region": "eu-central-1",
      "tags": {
        "service": "Nf6Chill"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:BatchGetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:eu-central-1:*:table/Nf6Chill_games_dev"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:eu-central-1:*:table/Nf6Chill_rankings_dev"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:BatchGetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:eu-central-1:*:table/Nf6Chill_tournaments_dev"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "AddGameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Nf6Chill-dev-addGame"
            }
          },
          "AddRawGameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Nf6Chill-dev-addRawGame"
            }
          },
          "AddPlayerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Nf6Chill-dev-addPlayer"
            }
          },
          "AddRawPlayerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Nf6Chill-dev-addRawPlayer"
            }
          },
          "GetRankingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Nf6Chill-dev-getRankings"
            }
          },
          "GetGamesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Nf6Chill-dev-getGames"
            }
          },
          "CreateTournamentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Nf6Chill-dev-createTournament"
            }
          },
          "GetTournamentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Nf6Chill-dev-getTournament"
            }
          },
          "GetTournamentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Nf6Chill-dev-getTournaments"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "Nf6Chill",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Nf6Chill-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Nf6Chill-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "Nf6Chill",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-nslsKjXX3GFMfjghVg"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "AddGameLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "AddRawGameLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "AddPlayerLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "AddRawPlayerLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetRankingsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetGamesLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateTournamentLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetTournamentLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetTournamentsLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AddGameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/Nf6Chill.zip"
              },
              "FunctionName": "Nf6Chill-dev-addGame",
              "Handler": "s_addGame.handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Description": "Adds a game to the games table",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "Nf6Chill"
                }
              ],
              "Environment": {
                "Variables": {
                  "GAMES_TABLE": "Nf6Chill_games_dev",
                  "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
                }
              }
            },
            "DependsOn": [
              "AddGameLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AddGameLambdaVersionAzV9MKKMk9tnUp0kTjtpFz9HHdvPbZ9sSMCbfKoxX4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddGameLambdaFunction"
              },
              "CodeSha256": "Etlcy9hpDmbsrmhRdmxuXl8eklJZDzDN84+2o3qSOZI=",
              "Description": "Adds a game to the games table"
            }
          },
          "AddRawGameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/Nf6Chill.zip"
              },
              "FunctionName": "Nf6Chill-dev-addRawGame",
              "Handler": "s_addRawGame.handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Description": "Adds a raw game to the games table",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "Nf6Chill"
                }
              ],
              "Environment": {
                "Variables": {
                  "GAMES_TABLE": "Nf6Chill_games_dev"
                }
              }
            },
            "DependsOn": [
              "AddRawGameLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AddRawGameLambdaVersionOfxW2Nir1bAjx8SmHPhhXU9zNlueKyI122mU05B21W4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddRawGameLambdaFunction"
              },
              "CodeSha256": "Etlcy9hpDmbsrmhRdmxuXl8eklJZDzDN84+2o3qSOZI=",
              "Description": "Adds a raw game to the games table"
            }
          },
          "AddPlayerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/Nf6Chill.zip"
              },
              "FunctionName": "Nf6Chill-dev-addPlayer",
              "Handler": "s_addPlayer.handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Description": "Adds a player to the rankings table",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "Nf6Chill"
                }
              ],
              "Environment": {
                "Variables": {
                  "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
                }
              }
            },
            "DependsOn": [
              "AddPlayerLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AddPlayerLambdaVersion0qIwzhcw8JIahieXTFr5pRS8E124DBSfLzD8vL3dSE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddPlayerLambdaFunction"
              },
              "CodeSha256": "Etlcy9hpDmbsrmhRdmxuXl8eklJZDzDN84+2o3qSOZI=",
              "Description": "Adds a player to the rankings table"
            }
          },
          "AddRawPlayerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/Nf6Chill.zip"
              },
              "FunctionName": "Nf6Chill-dev-addRawPlayer",
              "Handler": "s_addRawPlayer.handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Description": "Adds a raw player to the rankings table",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "Nf6Chill"
                }
              ],
              "Environment": {
                "Variables": {
                  "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
                }
              }
            },
            "DependsOn": [
              "AddRawPlayerLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AddRawPlayerLambdaVersionC9gC9s2wVvYaany1X3MWX5Dg8cltRytsIj0zjiguLE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddRawPlayerLambdaFunction"
              },
              "CodeSha256": "Etlcy9hpDmbsrmhRdmxuXl8eklJZDzDN84+2o3qSOZI=",
              "Description": "Adds a raw player to the rankings table"
            }
          },
          "GetRankingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/Nf6Chill.zip"
              },
              "FunctionName": "Nf6Chill-dev-getRankings",
              "Handler": "s_getRankings.handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Description": "Lists the rankings",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "Nf6Chill"
                }
              ],
              "Environment": {
                "Variables": {
                  "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
                }
              }
            },
            "DependsOn": [
              "GetRankingsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetRankingsLambdaVersionusjp0SQLZwfz5MaBeKuWBAaWDqUOcx69p9R4PVfQ4Z0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRankingsLambdaFunction"
              },
              "CodeSha256": "Etlcy9hpDmbsrmhRdmxuXl8eklJZDzDN84+2o3qSOZI=",
              "Description": "Lists the rankings"
            }
          },
          "GetGamesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/Nf6Chill.zip"
              },
              "FunctionName": "Nf6Chill-dev-getGames",
              "Handler": "s_getGames.handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Description": "Lists games",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "Nf6Chill"
                }
              ],
              "Environment": {
                "Variables": {
                  "GAMES_TABLE": "Nf6Chill_games_dev"
                }
              }
            },
            "DependsOn": [
              "GetGamesLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetGamesLambdaVersion4MPJZR7eM5zAzn9n4NpfYrqJoDF2SE6jMaPTdc4eNcQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetGamesLambdaFunction"
              },
              "CodeSha256": "Etlcy9hpDmbsrmhRdmxuXl8eklJZDzDN84+2o3qSOZI=",
              "Description": "Lists games"
            }
          },
          "CreateTournamentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/Nf6Chill.zip"
              },
              "FunctionName": "Nf6Chill-dev-createTournament",
              "Handler": "s_createTournament.handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Description": "Creates a new tournament",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "Nf6Chill"
                }
              ],
              "Environment": {
                "Variables": {
                  "TOURNAMENT_TABLE": "Nf6Chill_tournaments_dev",
                  "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
                }
              }
            },
            "DependsOn": [
              "CreateTournamentLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateTournamentLambdaVersionsi8iBSPnbBasfCFHknkcWZxg0iy7sRSaH138qA9n8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateTournamentLambdaFunction"
              },
              "CodeSha256": "Etlcy9hpDmbsrmhRdmxuXl8eklJZDzDN84+2o3qSOZI=",
              "Description": "Creates a new tournament"
            }
          },
          "GetTournamentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/Nf6Chill.zip"
              },
              "FunctionName": "Nf6Chill-dev-getTournament",
              "Handler": "s_getTournament.handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Description": "Returns a specific tournament",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "Nf6Chill"
                }
              ],
              "Environment": {
                "Variables": {
                  "GAMES_TABLE": "Nf6Chill_games_dev",
                  "TOURNAMENT_TABLE": "Nf6Chill_tournaments_dev"
                }
              }
            },
            "DependsOn": [
              "GetTournamentLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetTournamentLambdaVersiontYbKN1PnSc5vYuystquYEki0m33mruaTDBMtDfc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTournamentLambdaFunction"
              },
              "CodeSha256": "Etlcy9hpDmbsrmhRdmxuXl8eklJZDzDN84+2o3qSOZI=",
              "Description": "Returns a specific tournament"
            }
          },
          "GetTournamentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/Nf6Chill.zip"
              },
              "FunctionName": "Nf6Chill-dev-getTournaments",
              "Handler": "s_getTournaments.handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Description": "Returns all tournaments",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "Nf6Chill"
                }
              ],
              "Environment": {
                "Variables": {
                  "TOURNAMENT_TABLE": "Nf6Chill_tournaments_dev"
                }
              }
            },
            "DependsOn": [
              "GetTournamentsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetTournamentsLambdaVersionUamGKCVXkmqk58b2ud0xdK6HQJXIgLF5QzWMpuhIwrA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTournamentsLambdaFunction"
              },
              "CodeSha256": "Etlcy9hpDmbsrmhRdmxuXl8eklJZDzDN84+2o3qSOZI=",
              "Description": "Returns all tournaments"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-Nf6Chill",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceGame": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "game",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRawgame": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "rawgame",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlayer": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "player",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRawplayer": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "rawplayer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRankings": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "rankings",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGames": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "games",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTournament": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tournament",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTournaments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tournaments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGameOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGame"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRawgameOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRawgame"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlayerOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlayer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRawplayerOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRawplayer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRankingsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRankings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGamesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGames"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTournamentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTournament"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTournamentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTournaments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGamePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGame"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddGameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodRawgamePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRawgame"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddRawGameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPlayerPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlayer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddPlayerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodRawplayerPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRawplayer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddRawPlayerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodRankingsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRankings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRankingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodGamesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGames"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetGamesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTournamentPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTournament"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateTournamentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTournamentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTournament"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTournamentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTournamentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTournaments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTournamentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1566297815059": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodGameOptions",
              "ApiGatewayMethodRawgameOptions",
              "ApiGatewayMethodPlayerOptions",
              "ApiGatewayMethodRawplayerOptions",
              "ApiGatewayMethodRankingsOptions",
              "ApiGatewayMethodGamesOptions",
              "ApiGatewayMethodTournamentOptions",
              "ApiGatewayMethodTournamentsOptions",
              "ApiGatewayMethodGamePost",
              "ApiGatewayMethodRawgamePost",
              "ApiGatewayMethodPlayerPost",
              "ApiGatewayMethodRawplayerPost",
              "ApiGatewayMethodRankingsGet",
              "ApiGatewayMethodGamesGet",
              "ApiGatewayMethodTournamentPost",
              "ApiGatewayMethodTournamentGet",
              "ApiGatewayMethodTournamentsGet"
            ]
          },
          "AddGameLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddGameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddRawGameLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddRawGameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddPlayerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddPlayerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddRawPlayerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddRawPlayerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetRankingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRankingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetGamesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetGamesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateTournamentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateTournamentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTournamentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTournamentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTournamentsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTournamentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/Nf6Chill-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z/custom-resources.zip"
              },
              "FunctionName": "Nf6Chill-dev-custom-resource-apigw-cw-role",
              "Handler": "apiGatewayCloudWatchRole/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 180
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "Nf6Chill",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": "arn:aws:apigateway:*::/account",
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GamesTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "Nf6Chill_games_dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "RankingsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "Nf6Chill_rankings_dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "name",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "TournamentTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "Nf6Chill_tournaments_dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterAddGameLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "AddGameLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterAddRawGameLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "AddRawGameLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterAddPlayerLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "AddPlayerLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterAddRawPlayerLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "AddRawPlayerLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetRankingsLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetRankingsLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetGamesLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetGamesLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterCreateTournamentLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateTournamentLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetTournamentLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetTournamentLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetTournamentsLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetTournamentsLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterApiGatewayLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-central-1:802587217904:destination:nslsKjXX3GFMfjghVg#fvKNcH3rS7Crl7VbtN#Nf6Chill#dev",
              "FilterPattern": "\"SLS_ACCESS_LOG\"",
              "LogGroupName": {
                "Ref": "ApiGatewayLogGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            }
          },
          "AddGameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddGameLambdaVersionAzV9MKKMk9tnUp0kTjtpFz9HHdvPbZ9sSMCbfKoxX4"
            }
          },
          "AddRawGameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddRawGameLambdaVersionOfxW2Nir1bAjx8SmHPhhXU9zNlueKyI122mU05B21W4"
            }
          },
          "AddPlayerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddPlayerLambdaVersion0qIwzhcw8JIahieXTFr5pRS8E124DBSfLzD8vL3dSE"
            }
          },
          "AddRawPlayerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddRawPlayerLambdaVersionC9gC9s2wVvYaany1X3MWX5Dg8cltRytsIj0zjiguLE"
            }
          },
          "GetRankingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRankingsLambdaVersionusjp0SQLZwfz5MaBeKuWBAaWDqUOcx69p9R4PVfQ4Z0"
            }
          },
          "GetGamesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetGamesLambdaVersion4MPJZR7eM5zAzn9n4NpfYrqJoDF2SE6jMaPTdc4eNcQ"
            }
          },
          "CreateTournamentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateTournamentLambdaVersionsi8iBSPnbBasfCFHknkcWZxg0iy7sRSaH138qA9n8"
            }
          },
          "GetTournamentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTournamentLambdaVersiontYbKN1PnSc5vYuystquYEki0m33mruaTDBMtDfc"
            }
          },
          "GetTournamentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTournamentsLambdaVersionUamGKCVXkmqk58b2ud0xdK6HQJXIgLF5QzWMpuhIwrA"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "vpc": {}
    },
    "custom": {
      "GAMES_TABLE": "Nf6Chill_games_dev",
      "RANKINGS_TABLE": "Nf6Chill_rankings_dev",
      "TOURNAMENT_TABLE": "Nf6Chill_tournaments_dev"
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "addGame": {
        "handler": "s_addGame.handler",
        "memorySize": 128,
        "description": "Adds a game to the games table",
        "environment": {
          "GAMES_TABLE": "Nf6Chill_games_dev",
          "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
        },
        "events": [
          {
            "http": {
              "path": "game",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "Nf6Chill-dev-addGame",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "addRawGame": {
        "handler": "s_addRawGame.handler",
        "memorySize": 128,
        "description": "Adds a raw game to the games table",
        "environment": {
          "GAMES_TABLE": "Nf6Chill_games_dev"
        },
        "events": [
          {
            "http": {
              "path": "rawgame",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "Nf6Chill-dev-addRawGame",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "addPlayer": {
        "handler": "s_addPlayer.handler",
        "memorySize": 128,
        "description": "Adds a player to the rankings table",
        "environment": {
          "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
        },
        "events": [
          {
            "http": {
              "path": "player",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "Nf6Chill-dev-addPlayer",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "addRawPlayer": {
        "handler": "s_addRawPlayer.handler",
        "memorySize": 128,
        "description": "Adds a raw player to the rankings table",
        "environment": {
          "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
        },
        "events": [
          {
            "http": {
              "path": "rawplayer",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "Nf6Chill-dev-addRawPlayer",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "getRankings": {
        "handler": "s_getRankings.handler",
        "memorySize": 128,
        "description": "Lists the rankings",
        "environment": {
          "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
        },
        "events": [
          {
            "http": {
              "path": "rankings",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "Nf6Chill-dev-getRankings",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "getGames": {
        "handler": "s_getGames.handler",
        "memorySize": 128,
        "description": "Lists games",
        "environment": {
          "GAMES_TABLE": "Nf6Chill_games_dev"
        },
        "events": [
          {
            "http": {
              "path": "games",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "Nf6Chill-dev-getGames",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "createTournament": {
        "handler": "s_createTournament.handler",
        "memorySize": 128,
        "description": "Creates a new tournament",
        "environment": {
          "TOURNAMENT_TABLE": "Nf6Chill_tournaments_dev",
          "RANKINGS_TABLE": "Nf6Chill_rankings_dev"
        },
        "events": [
          {
            "http": {
              "path": "tournament",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "Nf6Chill-dev-createTournament",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "getTournament": {
        "handler": "s_getTournament.handler",
        "memorySize": 128,
        "description": "Returns a specific tournament",
        "environment": {
          "GAMES_TABLE": "Nf6Chill_games_dev",
          "TOURNAMENT_TABLE": "Nf6Chill_tournaments_dev"
        },
        "events": [
          {
            "http": {
              "path": "tournament",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "Nf6Chill-dev-getTournament",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "getTournaments": {
        "handler": "s_getTournaments.handler",
        "memorySize": 128,
        "description": "Returns all tournaments",
        "environment": {
          "TOURNAMENT_TABLE": "Nf6Chill_tournaments_dev"
        },
        "events": [
          {
            "http": {
              "path": "tournaments",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "Nf6Chill-dev-getTournaments",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "GamesTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "Nf6Chill_games_dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "RankingsTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "Nf6Chill_rankings_dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "name",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "name",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "TournamentTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "Nf6Chill_tournaments_dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yaml",
    "app": "nf6-chill",
    "tenant": "petteramu",
    "layers": {},
    "appUid": "fvKNcH3rS7Crl7VbtN",
    "tenantUid": "nslsKjXX3GFMfjghVg",
    "artifact": "/mnt/c/Projects/fussball-server/.serverless/Nf6Chill.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/Nf6Chill/dev/1566297833644-2019-08-20T10:43:53.644Z",
    "artifact": "Nf6Chill.zip"
  }
}