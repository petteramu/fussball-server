service: Nf6Chill
tenant: petteramu
app: nf6-chill

custom:
  GAMES_TABLE: "${self:service}_games_${self:provider.stage}"
  RANKINGS_TABLE: "${self:service}_rankings_${self:provider.stage}"
  TOURNAMENT_TABLE: "${self:service}_tournaments_${self:provider.stage}"

plugins:
  - serverless-offline

provider:
  name: aws
  stage: dev
  runtime: nodejs12.x
  region: eu-central-1
  tags:
    service: Nf6Chill
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.GAMES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.RANKINGS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.TOURNAMENT_TABLE}"

functions:
  addGame:
    handler: src/actions/addGame.handler
    memorySize: 128
    description: Adds a game to the games table
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
    events:
      - http:
          path: game
          method: post
          cors: true
  addRawGame:
    handler: src/actions/addRawGame.handler
    memorySize: 128
    description: Adds a raw game to the games table
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
    events:
      - http:
          path: rawgame
          method: post
          cors: true
  addPlayer:
    handler: src/actions/addPlayer.handler
    memorySize: 128
    description: Adds a player to the rankings table
    environment:
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
    events:
      - http:
          path: player
          method: post
          cors: true
  addRawPlayer:
    handler: src/actions/addRawPlayer.handler
    memorySize: 128
    description: Adds a raw player to the rankings table
    environment:
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
    events:
      - http:
          path: rawplayer
          method: post
          cors: true
  getRankings:
    handler: src/actions/getRankings.handler
    memorySize: 128
    description: Lists the rankings
    environment:
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
    events:
      - http:
          path: rankings
          method: get
          cors: true
  getGames:
    handler: src/actions/getGames.handler
    memorySize: 128
    description: Lists games
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
    events:
      - http:
          path: games
          method: get
          cors: true
  createTournament:
    handler: src/actions/createTournament.handler
    memorySize: 128
    description: Creates a new tournament
    environment:
      TOURNAMENT_TABLE: ${self:custom.TOURNAMENT_TABLE}
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
    events:
      - http:
          path: tournament
          method: post
          cors: true
  getTournament:
    handler: src/actions/getTournament.handler
    memorySize: 128
    description: Returns a specific tournament
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      TOURNAMENT_TABLE: ${self:custom.TOURNAMENT_TABLE}
    events:
      - http:
          path: tournament
          method: get
          cors: true
  getTournaments:
    handler: src/actions/getTournaments.handler
    memorySize: 128
    description: Returns all tournaments
    environment:
      TOURNAMENT_TABLE: ${self:custom.TOURNAMENT_TABLE}
    events:
      - http:
          path: tournaments
          method: get
          cors: true
<<<<<<< HEAD
  removeDuplicateGames:
    handler: src/actions/removeDuplicateGames.handler
    memorySize: 128
    description: Removes one of all duplicate games
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
    events:
      - http:
          path: removeDuplicateGames
          method: post
          cors: true
=======
  deleteGame:
    handler: src/actions/deleteGame.handler
    memorySize: 128
    description: Removes a game from the server
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
    events:
      - http:
          path: game/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
>>>>>>> 127937e76e96c8531b62238190d8d138b291b00b

resources:
  Resources:
    GamesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.GAMES_TABLE}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    RankingsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.RANKINGS_TABLE}
        AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TournamentTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.TOURNAMENT_TABLE}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
