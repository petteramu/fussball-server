service: Nf6Chill
app: nf6-chill

custom:
  STAGE: dev
  GAMES_TABLE: "${self:service}_games_${self:provider.stage}"
  RANKINGS_TABLE: "${self:service}_rankings_${self:provider.stage}"
  TOURNAMENT_TABLE: "${self:service}_tournaments_${self:provider.stage}"
  AUTH0_AUDIENCE: "${file(./auth0_credentials.yaml):AUTH0_AUDIENCE}"
  AUTH0_TOKEN_ISSUER: "${file(./auth0_credentials.yaml):AUTH0_TOKEN_ISSUER}"
  AUTH0_JWKS_URI: "${file(./auth0_credentials.yaml):AUTH0_JWKS_URI}"
  BUCKET_NAME: "bogb-ranking-and-matches-${self:custom.STAGE}"

plugins:
  - serverless-offline

provider:
  name: aws
  stage: ${self:custom.STAGE}
  runtime: nodejs12.x
  region: eu-central-1
  tags:
    service: Nf6Chill
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::${self:custom.BUCKET_NAME}/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.GAMES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.RANKINGS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.TOURNAMENT_TABLE}"

functions:
  authAddGame:
    handler: src/auth/auth.authAddGame
    environment:
      AUDIENCE: "${self:custom.AUTH0_AUDIENCE}"
      TOKEN_ISSUER: "${self:custom.AUTH0_TOKEN_ISSUER}"
      JWKS_URI: "${self:custom.AUTH0_JWKS_URI}"
  authAddPlayer:
    handler: src/auth/auth.authAddPlayer
    environment:
      AUDIENCE: "${self:custom.AUTH0_AUDIENCE}"
      TOKEN_ISSUER: "${self:custom.AUTH0_TOKEN_ISSUER}"
      JWKS_URI: "${self:custom.AUTH0_JWKS_URI}"
  authAddTournament:
    handler: src/auth/auth.authAddTournament
    environment:
      AUDIENCE: "${self:custom.AUTH0_AUDIENCE}"
      TOKEN_ISSUER: "${self:custom.AUTH0_TOKEN_ISSUER}"
      JWKS_URI: "${self:custom.AUTH0_JWKS_URI}"
  authDeleteGame:
    handler: src/auth/auth.authDeleteGame
    environment:
      AUDIENCE: "${self:custom.AUTH0_AUDIENCE}"
      TOKEN_ISSUER: "${self:custom.AUTH0_TOKEN_ISSUER}"
      JWKS_URI: "${self:custom.AUTH0_JWKS_URI}"
  addGame:
    handler: src/actions/addGame.handler
    memorySize: 128
    description: Adds a game to the games table
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
      CACHE_BUCKET: "${self:custom.BUCKET_NAME}"
    events:
      - http:
          path: game
          method: post
          cors: true
          authorizer: authAddGame
  updateCache:
    handler: src/actions/updateCache.handler
    memorySize: 128
    description: Updates the s3 cache
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
      CACHE_BUCKET: "${self:custom.BUCKET_NAME}"
    events:
      - http:
          path: updateCache
          method: post
          cors: true
  addRawGame:
    handler: src/actions/addRawGame.handler
    memorySize: 128
    description: Adds a raw game to the games table
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      CACHE_BUCKET: "${self:custom.BUCKET_NAME}"
    events:
      - http:
          path: rawgame
          method: post
          cors: true
          authorizer: authAddGame
  addPlayer:
    handler: src/actions/addPlayer.handler
    memorySize: 128
    description: Adds a player to the rankings table
    environment:
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
      CACHE_BUCKET: "${self:custom.BUCKET_NAME}"
    events:
      - http:
          path: player
          method: post
          cors: true
          authorizer: authAddPlayer
  addRawPlayer:
    handler: src/actions/addRawPlayer.handler
    memorySize: 128
    description: Adds a raw player to the rankings table
    environment:
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
      CACHE_BUCKET: "${self:custom.BUCKET_NAME}"
    events:
      - http:
          path: rawplayer
          method: post
          cors: true
          authorizer: authAddPlayer
  getRankings:
    handler: src/actions/getRankings.handler
    memorySize: 128
    description: Lists the rankings
    environment:
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
    events:
      - http:
          path: rankings
          method: get
          cors: true
  getGames:
    handler: src/actions/getGames.handler
    memorySize: 128
    description: Lists games
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      CACHE_BUCKET: "${self:custom.BUCKET_NAME}"
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
    events:
      - http:
          path: games
          method: get
          cors: true
  createTournament:
    handler: src/actions/createTournament.handler
    memorySize: 128
    description: Creates a new tournament
    environment:
      TOURNAMENT_TABLE: ${self:custom.TOURNAMENT_TABLE}
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
    events:
      - http:
          path: tournament
          method: post
          cors: true
          authorizer: authAddTournament
  getTournament:
    handler: src/actions/getTournament.handler
    memorySize: 128
    description: Returns a specific tournament
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      TOURNAMENT_TABLE: ${self:custom.TOURNAMENT_TABLE}
    events:
      - http:
          path: tournament
          method: get
          cors: true
  getTournaments:
    handler: src/actions/getTournaments.handler
    memorySize: 128
    description: Returns all tournaments
    environment:
      TOURNAMENT_TABLE: ${self:custom.TOURNAMENT_TABLE}
    events:
      - http:
          path: tournaments
          method: get
          cors: true
  removeDuplicateGames:
    handler: src/actions/removeDuplicateGames.handler
    memorySize: 128
    description: Removes one of all duplicate games
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      CACHE_BUCKET: "${self:custom.BUCKET_NAME}"
    events:
      - http:
          path: removeDuplicateGames
          method: post
          cors: true
          authorizer: authDeleteGame
  deleteGame:
    handler: src/actions/deleteGame.handler
    memorySize: 128
    description: Removes a game from the server
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
      CACHE_BUCKET: "${self:custom.BUCKET_NAME}"
    events:
      - http:
          path: game/{id}
          method: delete
          cors: true
          authorizer: authDeleteGame
          request:
            parameters:
              paths:
                id: true
  recalculateGames:
    handler: src/actions/recalculateGames.handler
    memorySize: 128
    description: Recalculates all games and updates the player rankings
    environment:
      GAMES_TABLE: ${self:custom.GAMES_TABLE}
      RANKINGS_TABLE: ${self:custom.RANKINGS_TABLE}
      CACHE_BUCKET: "${self:custom.BUCKET_NAME}"
    events:
      - http:
          path: recalculate
          method: get
          cors: true
          authorizer: authAddGame

resources:
  Resources:
    CacheBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: ${self:custom.BUCKET_NAME}
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: "arn:aws:s3:::${self:custom.BUCKET_NAME}/*"
              Principal: '*'
    GamesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.GAMES_TABLE}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    RankingsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.RANKINGS_TABLE}
        AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TournamentTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.TOURNAMENT_TABLE}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
